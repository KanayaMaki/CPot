位置はPosition

Windowsの初期化
グラフィックAPIの初期化
インプットの初期化
サウンドの初期化

WinMain
	Game* g = CreateGame();
	g->Setting();

	Application::S().Start();


WindowsGameLoop
	void GameLoop
		Init
		Game.Init

		while(true) {
			Fps.Wait
			Input.Update
			Game.Update
			Game.Render
		}

Game* CreateGame() {
	return new MyGame;
}

Game
	virtual void Setting()
		ゲームが立ち上がってすぐの段階で、画面サイズやそのほかの設定をする
	virtual void Init()
		ゲームの初期化
	virtual void Update()
		ゲームの更新をする
	virtual void Render()
		ゲームの描画をする

template <typename T>
class DirtyFlag {
	T t;
	BOOL mIsDirty;

	operator const T&() {
		return Get();
	}

	const T& Get() const {
		return t;
	}
	void Set(const T& aT) {
		t = aT;
		mIsDirty = true;
	}

	void Clear() {
		mIsDirty = false;
	}
	BOOL IsDirty() const {
		return mIsDirty;
	}
}

class GameMain
	static GameBase* mGame

	static Main() {
		//初期化
		mGame->Init();

		while(true) {
			Input::S().Update();
			mGame->Update();
			mGame->Render();
			Fps::S().Wait();

			if(mGameEnd) {
				break;
			}
		}
	}

伝えたいこと
	・ゲームの終了（更新時）
		Win-Game
		Game-Win
	・カーソルを表示するか（更新）
		Game-Win
	・画面サイズ（更新時）
		Game-Win
	・フォーカスがあるか（更新時）
		Win-Game
	・ウィンドウタイトル（更新時）
		Game-Win


class ConfigBase : public Singleton<ConfigBase>
	CPOT_VI void SetApplicationEnd(BOOL aEnd) CPOT_ZR;
	CPOT_VI BOOL GetApplicationEnd() CPOT_ZR;
	CPOT_VI void SetGameEnd(BOOL aEnd) CPOT_ZR;
	CPOT_VI const CHAR* GetTitle() CPOT_ZR;
	CPOT_VI void SetTitle(const CHAR* aTitle) CPOT_ZR;

	CPOT_VI void SetUseCursor(BOOL aUse) CPOT_ZR;
	CPOT_VI BOOL GetUseCursor() CPOT_ZR;

	CPOT_VI void SetIsActive(BOOL aIsActive) CPOT_ZR;
	CPOT_VI BOOL GetIsActive() CPOT_ZR;

	protected:
	String<64> mTitle;
	BOOL mApplicationEnd;
	BOOL mGameEnd;
	BOOL mActive;
	BOOL mUseCursor;

class windows::Config : public ConfigBase {
	BOOL GetIsActive() CPOT_OR {

	}
}


Thread
	Thread t;
	t.Start(DoFunc, data);

	//スレッドの終了を待つ
	t.Join();

	//スレッドを終了する
	t.Stop();


Input
	Input.GetValue(xinput::cLStickLeft);
	Input.GetButton(xinput::cLStickLeft);
	Input.GetButtonDown(ps4::cLStickLeft);
	Input.GetButtonPress(windows::cA);
	Input.GetAxis(xinput::cLStickX);
	Input.GetAxis(ps4::cLStickX);

	Input.GetButton(ps4::CInputCode) {

	}
	Input.GetButton(xinput::CButtonCode) {

	}
	Input.GetButton(windows::CButtonCode) {

	}


File
	class CFileOpenFlag {
	public:
		enum {
			cWrite = 1 << 0,
			cRead = 1 << 1,
			cBinary = 1 << 2,
			cAdd = 1 << 3
		}
	}
	using FileSize = u32;

	FileIn
		void Open(const CHAR* aFileName);
		void Close();
		void Read(Buffer& aBinary);

	FileOut
		void Open(const CHAR* aFileName, BOOL aAdd);
		void Close();
		void Write(Buffer& aBinary);


Audio
	AudioClip c;
	AUdioVoice v;
	v.Load(c);

	v.Valid();

	AudioVoiceDevice
		void Load(AudioClipDevice*);
		void Release();

		void ReleaseVoice() {
			ボイスの解放
		}
		BOOL IsLoad() const;

	AudioClipDevice
		void Load(const CHAR* aFileName);
		void Load(const Buffer& aBuffer);
		void Release();

		std::list<AudioVoiceDevice*>;
		void Observe(AudioVoiceDevice*);
		void UnObserve(AudioVoiceDevice*);

		BOOL IsLoad() const;


	AudioClipBase
		void Load(const CHAR* aFileName);
		void Load(const HashTableKey& aFileNameKey);
		void Release();

		void IsLoad() const;

	AudioVoiceBase
		void Load(AudioClip& c);
		void Release();

		void SetVolume(f32 aVolume);
		f32 GetVolume() const;
		void Play();
		void Stop();
		void ToStart();

		void IsLoad() const;

		AudioClip* mClip;


using GameObjectName = HashString<32>;

GameObject

	void Init(GameObject* aParent, const CHAR* aName) {
		//GameObjectの追加
	}
	void Init(GameObject* aParent) {
		Init(aParent, nullptr);
	}

	Transform mTransform;
	const Transform& GetTransform() const;
	void SetTransform(const Transform& aTransform);

	GameObject* aParent;
	GameObject* GetParent();
	void SetParent(GameObject* aParent);
	void DetachParent();	//親オブジェクトから独立する

	List<GameObject*> mChilds;
	GameObject* GetChild(u32 aIndex);
	GameObject* FindChild(const CHAR* aName);
	u32 GetChildNum() const;
	void RegistChild(GameObject* aChild);
	void RemoveChild(GameObject* aChild);

	GameObjectName mName;
	const GameObjectName& GetName() const;
	void SetName(const CHAR* aName);
	void SetName(const GameObjectName& aName);

	List<Component*> mList;
	template<typename T>
	T* GetComponent();
	T* AddComponent();
	void AddComponent(T*);
	void RemoveComponent(T* aComponent);
	u32 GetComponentNum() const;
	template<typename T>
	u32 GetComponentNum() const;

	BitFlag mFlags;
	enum CFlags {
		cDelete,
		cActive
	}
	BOOL GetDelete() const;
	void SetDelete();

	BOOL GetActive() const;
	BOOL GetHierarchyActive() const;
	void SetActive(BOOL aIsActive);

	u32 mUnique;
	u32 GetUnique() const;

	static GameObject* Find(const CHAR* aName);
	static GameObject* Find(const CHAR* aName);
	static GameObject* Delete(GameObject* aGameObject);


//GameObject.UpdateList();	//ゲームオブジェクトが更新される
Component.UpdateList();	//コンポーネントが更新される
GameObject.DeleteList();	//要素の削除
Component.DeleteList();	//要素の削除
GameObject.Merge();	//追加された要素の統合
Component.Merge();	//追加された要素の統合

using ComponentName = HashString<28>;

Component
	GameObject* mGameObject;
	GameObject* GetGameObject();

	BitFlag mFlags;
	enum CFlags {
		cDelete,
		cDeleteNow,
		cActive,
		cGameObjectActive
	}
	BOOL GetDelete() const;
	void SetDelete();

	BOOL GetDeleteNow() const;

	BOOL GetActive() const;
	BOOL GetThisActive() const;
	BOOL GetGameObjectActive() const;
	void SetActive(BOOL aIsActive);

	template <typename T>
	T* GetComponent();
	template <typename T>
	u32 GetComponentNum();
	const Transform& GetTransform();
	void SetTransform(const Transform& aTransform);

	ComponentName mName;
	const ComponentName& GetName() const;
	void SetName(const CHAR* aName);
	void SetName(const ComponentName& aName);

	u32 mUnique;
	u32 GetUnique() const;

	virtual Component* Generate() {
		return new T;
	}
	


描画
インプットの更新

GameLoop：一定の間隔で呼ばれ続ける。入力の更新などを行う
