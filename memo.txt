位置はPosition

Windowsの初期化
グラフィックAPIの初期化
インプットの初期化
サウンドの初期化

WinMain
	Game* g = CreateGame();
	g->Setting();

	Application::S().Start();



WindowsGameLoop
	void GameLoop
		Init
		Game.Init

		while(true) {
			Fps.Wait
			Input.Update
			Game.Update
			Game.Render
		}

Game* CreateGame() {
	return new MyGame;
}

Game
	virtual void Setting()
		ゲームが立ち上がってすぐの段階で、画面サイズやそのほかの設定をする
	virtual void Init()
		ゲームの初期化
	virtual void Update()
		ゲームの更新をする
	virtual void Render()
		ゲームの描画をする

Setting
	Vector2 mScreenWidth;
	BOOL mUseCursor;
	f32 mFps;
	CHAR* mTitle;


using TickType = u64;
static const TickType cTickScale = 1200000UL;

inline TickType ToTick(f32 aSecond) {
	return aSecond * cTickScale;
}
inline f32 ToSecond(TickType aTick) {
	return (f64)aTick / cTickScale;
}

struct DateTime {
	s32 year;
	u8 month;
	u8 day;
	u8 hour;
	u8 minute;
	u8 second;
	enum CYoubi :  u8 {
		cSunday,
	} youbi;
}


f32 GetDeltaTime();
u64 GetDeltaTick();
void SetDeltaTick(u64 aDeltaTick);
u64 mDeltaTick;


TimeBase
	CPOT_VIR u32 GetUnix() const CPOT_ZR;
	CPOT_VIR f64 GetLocal() const CPOT_ZR;
	CPOT_VIR DateTime GetDateTime() CPOT_ZR;
	CPOT_VIR DateTime ToDateTime(u32 aUnix) CPOT_ZR;



standard::DateTimeDevice

standard::UnixTimeDevice

windows::LocalTimeDevice


windows::Time
	u32 GetUnix() const CPOT_OR {
		return standard::UnixTimeDevice::Get();
	}
	f64 GetLocal() const CPOT_OR {
		return LocalTimeDevice::Get();
	}
	DateTime GetDateTime() const CPOT_OR {
		return standard::DateTimeDevice::Get();
	}
	DateTime ToDateTime(u32 aUnix) const CPOT_OR {
		return standard::DateTimeDevice::Get(aUnix);
	}


描画
インプットの更新

GameLoop：一定の間隔で呼ばれ続ける。入力の更新などを行う
