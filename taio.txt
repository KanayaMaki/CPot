・OpenGLでレンダーバッファを使用するときに、左上が0,0のUV座標を使ってそれを描画すると上下が逆転してしまう
	→OpenGLでのテクスチャは左下から格納されているようなので、UV座標の上下を逆転して対応
	：モデルのUV座標を逆転させると、例えばトゥーンテクスチャを参照するときなどのシェーダで生成したUVが反転してしまう。
		シェーダを自動生成するときに逆転されたUVかどうかを判別するのが難しいので、モデルのUV座標は反転させず、
		シェーダ内でテクスチャ参照するUVを全て逆転させるほうが簡単だと判断した

・ゲーム部分を呼び出される形にしているのは、ゲームループをコントロールできない環境もあると考えたため。
　コールバックのような環境でも対応できるようにするため

・ビューポートを設定するときなどに、DirectX11はマルチビューポートに対応している
	→OpenGLでも最近のは対応している、OpenGL/ESは対応していない、などと制限がそれぞれ違う
	→最大公約数的な機能だけを実現させるべきなのか迷った。これがマルチプラットフォームの難しいところだと思う
	→個人的には、全てのプラットフォームが可能な機能だけを実現するべきだと思った。劣化してでもどうにか似たような機能が実現できるなら、
	　その機能は実装してもいいと考える

・NDKでAndroidも開発をしようと思ったが、stdライブラリがおかしくて実質STLが使えなかった
　→使えるように開発できる環境を、もっと能力があれば構築できたと思う
　→もし本当にSTLが存在しない環境があった場合、どうするのか難しい。

・各APIの限界を知る必要があるので、かなり知識と研究が必要だと思う

・機能ごとに外から気楽に使用できる形にしたかったが、環境による型の違いに対応するためにusingでs32などを定義したり、
	基本的な関数やクラスを定義するなどするうちに、一つの機能を入れる為にatomフォルダ全てを入れないとだめになってしまった。
	ゲームエンジンならこれでいいが、単なるライブラリ作りとしては、どうすればよかったのか

・最初の実装をする前に、頭の中で複雑な最適化の方法が浮かんでしまい、そちらを実装しようと考えてしまう。
　結果複雑になりすぎて頭が限界になる、というのがかなり多いと自分で分析している。
　よりよくする方法を思いつくのは自分の強みだと思うので、それに振り回されないように気を付けたい。

・コメントがなくても読みやすいコードにしよう、というのを聞いて、コメントがなくても読めるコード
